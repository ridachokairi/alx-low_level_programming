!<arch>
_putchar.o/     0           0     0     644     269       `
#include "main.h"
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: the character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
        return (write(1,&c,1));
}

0-isupper.o/    0           0     0     644     282       `
#include "main.h"

/**
 * _isupper - checks for uppercase character
 * @c: input
 * Return: 1 if c is uppercase, 0 otherwise
 */

int _isupper(int c)
{
        if (c >= 'A' && c <= 'Z')
                return (1);

        else
                return (0);
        _putchar('\n');
}
0-memset.o/     0           0     0     644     351       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 * @s: a pointer
 * @b: constant byte
 * @n: number of bytes to fill
 * Return: pointer
 *
 */

char *_memset(char *s, char b, unsigned int n)
{
        int i = 0;

        for (; n > 0; i++)
        {
                s[i] = b;
                n--;
        }
        return (s);
}

0-strcat.o/     0           0     0     644     458       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @src: the appended string
 * @dest: the first string
 * Return: string
 *
 */

char *_strcat(char *dest, char *src)
{
        int i = 0, j = 0;

        while (dest[i] != '\0')
        {
                i++;
        }
        while (src[j] != '\0')
        {
                dest[i] = src[j];
                i++;
                j++;
        }
        dest[i] = '\0';
        return (dest);
}
1-isdigit.o/    0           0     0     644     282       `
i#include "main.h"

/**
 * _isdigit - checks for a digit (0 through 9)
 * @c: input
 * Return: 1 if c is a digit, 0 otherwise
 */

int _isdigit(int c)
{
        if (c >= '0' && c <= '9')
                return (1);
        else
                return (0);
        _putchar('\n');
}
1-mempcy.o/     0           0     0     644     349       `
#include "main.h"

/**
 * _mempcy - copies memory area
 * @dest : the memory area to copy to 
 * @src: the memory area to copy from
 * @n: number of bytes to copy
 * Return: a pointer to copied memory
 */

char *_mempcy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		dest[i] = src[i];
		i++;
	}
	return (dest);
}

1-strncat.o/    0           0     0     644     520       `
#include "main.h"

/**
 * _strncat - concatenates two strings
 * @dest: the first string
 * @src: the appended string
 * @n: numbers of bytes of the appended string
 * Return: string
 */

char *_strncat(char *dest, char *src, int n)
{
        int i = 0, j = 0;

        while (dest[i] != '\0')
        {
                i++;
        }
        while (j < n && src[j] != '\0')
        {
                dest[i] = src[j];
                i++;
                j++;
        }
        dest[i] = '\0';
        return (dest);
}
100-atoi.o/     0           0     0     644     148       `
#include "main.h"

/**
 * _atoi - Convert a string to an integer
 * @s: the pointer to convert
 * Return: an integer
 *
 */

int _atoi(char *s)
{
}
2-strchr.o/     0           0     0     644     452       `
#include "main.h"

/**
 * _strchr - locates a character in a string
 * @s: a pointer to a string
 * @c: the character we look for
 * Return: pointer to the first occurence of the character c in the string s, 0 if the character is not found
 *
 */

char *_strchr(char *s, char c)
{
        int i;

        for (i = 0; s[i] >= '\0'; i++)
        {
                if (s[i] == c)
                        return (s + i);
        }
        return ('\0');
}
2-strlen.o/     0           0     0     644     300       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: the input  string
 * Return: the length of a the string s
 *
 */

int _strlen(char *s)
{
        int len = 0;

        while (*s != '\0')
        {
                len++;
                s++;
        }
        return (len);
}
2-strncpy.o/    0           0     0     644     476       `
#include "main.h"

/**
 * strncpy - copies a string
 * @dest: the output string
 * @src: the copied string
 * @n: number of bytes of the copied string
 * Return: string
 */

char *_strncpy(char *dest, char *src, int n)
{
        int i = 0;

        while (i < n && src[i] != '\0')
        {
                dest[i] = src[i];
                i++;
        }
        while (i < n)
        {
                dest[i] = '\0';
                i++;
        }
        return (dest);
}
3-islower.o/    0           0     0     644     285       `
#include "main.h"

/**
 * _islower - Entry point
 * @c: character in ASCII code
 * Return: 1 if the c is lowercase , 0 otherwise
 */

int _islower(int c)
{
        if (c <= 'z' && c >= 'a')
                return (1);
        else
                return (0);
        _putchar('\n');
}

3-puts.o/       0           0     0     644     280       `
#include "main.h"

/**
 * _puts - prints a string , followed by a new
 * line, to stdout
 * @str: the string to print
 *
 */

void _puts(char *str)
{
        while (*str != '\0')
        {
                _putchar(*str);
                str++;
        }
        _putchar('\n');
}
3-strcmp.o/     0           0     0     644     424       `
#include "main.h"

/**
 * strcmp - compares two strings
 * @s1: the first string
 * @s2: the second string
 * Return: s1[i] - s2[i]
 *
 */

int _strcmp(char *s1, char *s2)
{
        int i = 0;

        while (s1[i] != '\0' && s2[i] != '\0')
        {
                if (s1[i] != s2[i])
                {
                        return (s1[i] - s2[i]);
                }
                i++;
        }
        return (0);
}
3-strspn.o/     0           0     0     644     594       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 * @s: the string we are looking into
 * @accept: string consists of bytes
 * Return : integer
 */

unsigned int _strspn(char *s, char *accept)
{
        int i = 0, j = 0;
        unsigned int n = 0;

        for (; s[i] != '\0'; i++)
        {
                for (; accept[j] ; j++)
                {
                        if (accept[j] == s[i])
                        {
                                n++;
                        }
                        break;
                }
        }
        return (n);
}
4-isalpha.o/    0           0     0     644     363       `
#include "main.h"

/**
 * _isalpha - function that checks for alphabetic character
 *
 * @c: the character in ASCII code
 * Return: 1  if c is lowercase or uppercase, 0 otherwise
 */

int _isalpha(int c)
{
        if ((c <= 'z' && c >= 'a') || (c <= 'Z' && c >= 'A'))
                return (1);
        else
                return (0);
        _putchar('\n');
}

4-strpbrk.o/    0           0     0     644     515       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: the string we look for in
 * @accept: the string we search
 *
 */

char *_strpbrk(char *s, char *accept)
{
        int i, j;

        for (i = 0; s[i] >= '\0'; i++)
        {
                for (j = 0; accept[j]; j++)
                {
                        if (accept[j] == s[i])
                                break;
                }
                return (s);
                break;
        }
        return ('\0');
}

5-strstr.o/     0           0     0     644     782       `
#include "main.h"

/**
 * _strstr - locates a substring
 * @haystack: the input string
 * @needle: the substring
 * Return: a pointer to the beginning of the located substring
 */

char *_strstr(char *haystack, char *needle)
{
        int i = 0, j = 0;

        while (haystack[i])
        {
                while (needle[j] && (haystack[i] == needle[0]))
                {
                        if (haystack[i + j] == needle[j])
                                j++;
                        else
                                break;
                }
                if (needle[j])
                {
                        i++;
                        j = 0;
                }
                else
                        return (haystack + i);
        }
        return (0);
}
6-abs.o/        0           0     0     644     283       `
#include "main.h"
#include <stdio.h>

/**
 * _abs -  computes the absolute value of an intege
 *
 *@i: integer
 *
 * Return: absolute value
 */

int _abs(int i)
{
        if (i >= 0)
                return (i);
        else
                return (i * -1);
        _putchar('\n');
}

9-strcpy.o/     0           0     0     644     442       `
#include "main.h"

/**
 * *_strcpy - copies a string pointed by a pointer
 * @dest:the copied string
 * @src:the original string
 * Return: copied string
 *
 */

char *_strcpy(char *dest, char *src)
{
        int len = 0, i;

        while (src[len] != '\0')
        {
                len++;
        }
        for (i = 0; i < len ; i++)
        {
                dest[i] = src[i];
        }
        dest[len] = '\0';
        return (dest);
}
